ORG 0

AGAIN:	acall	CONFIGURE_LCD
	MOV A,#'P'
	acall SEND_DATA
	MOV A,#'H'
	acall SEND_DATA
	MOV A,#'I'
	acall SEND_DATA
	MOV A,#'('
	acall SEND_DATA
	MOV R4,0
MOV R5, #4
MOVE:acall KEYBOARD
	CJNE A,#'A',HERE1
	MOV A, #')'
	ACALL SEND_DATA
	acall DELAY
	MOV A, #'='
	ACALL SEND_DATA
	acall DELAY
	SJMP ONEDIG
HERE1: PUSH A
	ACALL SEND_DATA
	acall DELAY
	INC R4
	DJNZ R5, MOVE
	SJMP AGAIN

ONEDIG: CJNE R4, #1,TWO
	POP A
	ANL A,#0Fh
	SJMP MAM
TWO: CJNE R4, #2,THREE
	POP A
	MOV 46h, A
	ANL A,#0Fh
	MOV R6,A
	POP A
	ANL A,#0Fh
	MOV B, #10
	MUL AB
	ADD A,R6
	SJMP MAM
THREE: POP A
	MOV 46h, A
	ANL A,#0Fh
	MOV R6,A
	POP A
	ANL A,#0Fh
	MOV B, #10
	MUL AB
	ADD A,R6
	MOV R6,A
	POP A
	ANL A,#0Fh
	MOV B, #100
	MUL AB
	ADD A,R6



MAM:
MOV R0, A
MOV DPTR, #PRIMES
MOV R4, #1
TRY: CLR A
MOVC A,@A+DPTR
PUSH A
XCH A,B
LCALL DIVISIBILITY
JNC ONEMORE
CJNE R4,#1, ONE
MOV A, R0
MOV R3,B
DIV AB
DEC R3
MOV B, R3
MUL AB
DEC R4
MOV R0, A
INC DPTR
SJMP TRY
ONE: 
MOV A, R0
MOV R3, B
DIV AB
MOV B, R3
DEC B
MUL AB
MOV R0, A
ONEMORE: POP A
MOV B, A
INC DPTR
CJNE R1, #251, FIN1
LJMP HERE
FIN1:SJMP TRY

DIVISIBILITY: MOV R1,B
MOV A, R0
CLR C
DIV AB
JBC OV, DIVISIBILITY
MOV R2,B
CJNE R2, #00h , CANNOT
SETB C
MOV B, R1
RET
CANNOT: CLR C
MOV B, R1
RET

HERE: MOV A, R0
MOV B, #100
DIV AB
MOV R7, A
JZ TWO1
ORL A, #30H
acall SEND_DATA
TWO1: MOV A, B
MOV B, #10
DIV AB
CJNE R7, #0, TWO2
JZ THREE1
TWO2: ORL A, #30H
acall SEND_DATA
THREE1:MOV A,B
ORL A, #30H
acall SEND_DATA
ACALL DELAY








CONFIGURE_LCD:	;THIS SUBROUTINE SENDS THE INITIALIZATION COMMANDS TO THE LCD
	mov a,#38H	;TWO LINES, 5X7 MATRIX
	acall SEND_COMMAND
	mov a,#0FH	;DISPLAY ON, CURSOR BLINKING
	acall SEND_COMMAND
	mov a,#06H	;INCREMENT CURSOR (SHIFT CURSOR TO RIGHT)
	acall SEND_COMMAND
	mov a,#01H	;CLEAR DISPLAY SCREEN
	acall SEND_COMMAND
	mov a,#80H	;FORCE CURSOR TO BEGINNING OF THE FIRST LINE
	acall SEND_COMMAND
	ret



SEND_COMMAND:
	mov p1,a		;THE COMMAND IS STORED IN A, SEND IT TO LCD
	clr p3.5		;RS=0 BEFORE SENDING COMMAND
	clr p3.6		;R/W=0 TO WRITE
	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	acall DELAY
	clr p3.7
	ret


SEND_DATA:
	mov p1,a		;SEND THE DATA STORED IN A TO LCD
	setb p3.5	;RS=1 BEFORE SENDING DATA
	clr p3.6		;R/W=0 TO WRITE
	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	acall DELAY
	clr p3.7
	ret

DELAY:
	push 0
	push 1
	mov r0,#255
DELAY_OUTER_LOOP:
	mov r1,#255
	djnz r1,$
	djnz r0,DELAY_OUTER_LOOP
	pop 1
	pop 0
	ret


KEYBOARD: ;takes the key pressed from the keyboard and puts it to A
	mov	P0, #0ffh	;makes P0 input
K1:
	mov	P2, #0	;ground all rows
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, K1
K2:
	acall	DELAY
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, KB_OVER
	sjmp	K2
KB_OVER:
	acall DELAY
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, KB_OVER1
	sjmp	K2
KB_OVER1:
	mov	P2, #11111110B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_0
	mov	P2, #11111101B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_1
	mov	P2, #11111011B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_2
	mov	P2, #11110111B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_3
	ljmp	K2
	
ROW_0:
	mov	DPTR, #KCODE0
	sjmp	KB_FIND
ROW_1:
	mov	DPTR, #KCODE1
	sjmp	KB_FIND
ROW_2:
	mov	DPTR, #KCODE2
	sjmp	KB_FIND
ROW_3:
	mov	DPTR, #KCODE3
KB_FIND:
	rrc	A
	jnc	KB_MATCH
	inc	DPTR
	sjmp	KB_FIND
KB_MATCH:
	clr	A
	movc	A, @A+DPTR; get ASCII code from the table 
	ret

;ASCII look-up table 
KCODE0:	DB	'1', '2', '3', 'A'
KCODE1:	DB	'4', '5', '6', 'B'
KCODE2:	DB	'7', '8', '9', 'C'
KCODE3:	DB	'*', '0', '#', 'D'

MYSTRING: DB 'PHI('

PRIMES: DB 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,251
END


