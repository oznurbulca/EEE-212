
#include <MKL25Z4.h>
#include <stdio.H>
void Delay(volatile unsigned int time_del);
void LCD_command(unsigned char command);
void LCD_data(unsigned char data);
void LCD_init(void);
void LCD_ready(void);
int print_num(int x);
void print_fnc(unsigned char *data);
int initialize(void);	//initializes switch interrupt for PTA16 and timer interrupt for LCD/
void PORTA_IRQHandler(void);
void SysTick_Handler(void);
void ADC0_init(void);
void DAC0_init(void);
int ADC_Func(void);
volatile int wavetype=0 ;
volatile int wave=0 ;
int k;
#define RS 0x04     /* PTA2 mask */ 
#define RW 0x10     /* PTA4 mask */ 
#define EN 0x20     /* PTA5 mask */

int main (void) 
{int x;
	float coef = 0;
	uint32_t result = 0;
	float m = 0;
			LCD_init();
	LCD_command(0x01);
	DAC0_init(); /* Configure DAC0 */
	ADC0_init(); /* Configure ADC0 */
	initialize();
	const static int sinewaves[59] ={  39, 155, 345, 599,  909, 1263,  1648,  2047,   2831, 3185,  3495, 3749,  3939,  4055,  4095,  4055, 3939,  3749,  3495,  3185,  2831,  2446, 2047,1648, 1263,  909,  599, 345, 155, 39,  0 ,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
	const static int sawwaves[59] ={0, 65, 130, 195, 260, 325, 390, 455, 520, 585, 650, 715,  845, 910, 975, 1040, 1105, 1170,  1300, 1365, 1430, 1495, 1560, 1690, 1755, 1820, 1885, 1950, 2015, 2080, 2145, 2210, 2275, 2340, 2405, 2470, 2535, 2600, 2665, 2730, 2795, 2860, 2925, 2990, 3055, 3120, 3185, 3250, 3315, 3380, 3445, 3510, 3640, 3705, 3770, 3835, 3965, 4030, 4095};
	const static int squarewaves[59] ={ 0,0,0,0,0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095};
	while (1) {
		ADC0->SC1[0] = 0; /* start conversion on channel 0 */
		while (!(ADC0->SC1[0] & 0x80)) {
			
		
				/* write value to DAC0 */
		if(wave == 0) {
			for (k = 0; k < 59; k++) {
				DAC0->DAT[0].DATL = ((int)(squarewaves[k] * coef)) & 0xff; /* write low byte */
					DAC0->DAT[0].DATH = (((int)(squarewaves[k] * coef)) >> 8) & 0x0f;/* write high byte */
					Delay(5);}}
		
		if(wave == 1) {
			for (k = 0; k < 59; k++) {
				DAC0->DAT[0].DATL = ((int)(sinewaves[k] * coef)) & 0xff; /* write low byte */
					DAC0->DAT[0].DATH = (((int)(sinewaves[k] * coef)) >> 8) & 0x0f;/* write high byte */
					Delay(3);}}
		
		//else{
		if(wave == 2) {
			for (k = 0; k < 59; k++) {
				DAC0->DAT[0].DATL = ((int)(sawwaves[k] * coef)) & 0xff; /* write low byte */
					DAC0->DAT[0].DATH = (((int)(sawwaves[k] * coef)) >> 8) & 0x0f;/* write high byte */
					}}
		
		
result = ADC0->R[0]; /* read conversion result and clear COCO flag */
			coef = result / 4096.0;
	} }
			
		
			
		
		

	}

	
	


	
int initialize(void){
	
	 __disable_irq();           /* disable all IRQs */
	
	SIM->SCGC5 |= 0x400;  //enable port B for output/
	PORTB->PCR[1] = 0X100; /* make PTB1 GPIO*/
	PORTB->PCR[2] = 0X100; /* make PTB2 GPIO*/
	PORTB->PCR[3] = 0X100; /* make PTB3 GPIO*/
	PTB->PDDR |= 0x0E ;//make PTB1,2,3 outputs/
	
	SIM->SCGC5 |= 0x200; //enable clock A/
	PORTA->PCR[16] |= 0x100; //make PTA16 GPIO/
	PORTA->PCR[16] |= 0x002; //enable pull down for PTA16/ 
	PTA->PDDR &= ~0x10000;	//make PTA16 input/
	
	PORTA->PCR[16] &= ~0xF0000; /* clear interrupt selection */
	PORTA->PCR[16] |= 0xA0000; //interrupt at rising edge/
	
	SysTick->LOAD = (41940000/16) - 1; //to make 2 second delay/
	SysTick->CTRL = 3;			//clock is divided by 16 make such a long delay/
	
	NVIC->ISER[0] |= 0x40000000;	 /* enable INT30 (bit 30 of ISER[0]) */
	 __enable_irq();             /* global enable IRQs */
	

	
	return 0;
}
void PORTA_IRQHandler(void){
	__disable_irq();
	wave++;
	if (wave> 2){
		wave=0;}
	wavetype=1;
		PORTA-> ISFR |= 0x00010000;
		__enable_irq();
		Delay(30000);
}
	



void SysTick_Handler(void){
	
	int ADC_result;
	int V_result;
	/*
	static int i;
	i++;
	
	if (i % 2 == 0){
		LCD_command(0x01);
		print_fnc("Current F:360Hz");
	}
	else{
		LCD_command(0x01);
		print_fnc("Current F:50Hz");*
	}*/
	ADC_result = ADC_Func();
	V_result = ((ADC_result + 1)*3.3)*1000/4096;
		
		LCD_command(0x01);
		print_fnc("Currrent F:950Hz");
		LCD_command(0xC0);
		print_fnc("Currrent V:");
		print_num(V_result);
	
}

int ADC_Func(void){
	
	int ADC_code;
	//int V_result;/
		
		ADC0->SC1[0] = 0; //Starting conversion/
		while(!(ADC0->SC1[0] & 0x80)){} //wait for conversion to complete/
		ADC_code = ADC0->R[0];
	/*	V_result = ((ADC_code + 1)*3.3)*1000/4096;
		
		LCD_command(0x01);
		print_fnc("Currrent F:360Hz");
		LCD_command(0xC0);
		print_fnc("Currrent V:");
		print_num(V_result);*/
		
		return ADC_code;
}
int print_num(int x){
	
	int num_array[4];
	int i;
	char char_array[4];
	
	for (i = 0; i < 4; i++){
	 num_array[i] = x % 10;
	 char_array[i] = num_array[i] + 0x30;
		x = x / 10;	
	}
	
	LCD_data(char_array[3]);
	LCD_data('.');
	LCD_data(char_array[2]);
	LCD_data(char_array[1]);
	LCD_data(char_array[0]);
}
void DAC0_init(void) 
{
	SIM->SCGC6 |= 0x80000000; /* clock to DAC module */
	DAC0->C1 = 0; /* disable the use of buffer */
	DAC0->C0 = 0x80 | 0x20; /* enable DAC and use software trigger */
}

void ADC0_init(void)
{
	SIM->SCGC5 |= 0x2000; /* clock to PORTE */
	PORTE->PCR[20] = 0; /* PTE20 analog input */
	SIM->SCGC6 |= 0x8000000; /* clock to ADC0 */
	ADC0->SC2 &= ~0x40; /* software trigger */
	/* clock div by 4, long sample time, single ended 12 bit, bus clock */
	ADC0->CFG1 = 0x40 | 0x10 | 0x04 | 0x00;
}
void print_fnc(unsigned char *data)
{
	int i = 0 ;
	//Continue until a NULL char comes
	while(data[i] != 0x00)
	{
		LCD_data(data[i]);
		i++;
	}
}

void LCD_init(void)
{
    SIM->SCGC5 |= 0x1000;       /* enable clock to Port D */ 
    PORTD->PCR[0] = 0x100;      /* make PTD0 pin as GPIO */
    PORTD->PCR[1] = 0x100;      /* make PTD1 pin as GPIO */
    PORTD->PCR[2] = 0x100;      /* make PTD2 pin as GPIO */
    PORTD->PCR[3] = 0x100;      /* make PTD3 pin as GPIO */
    PORTD->PCR[4] = 0x100;      /* make PTD4 pin as GPIO */
    PORTD->PCR[5] = 0x100;      /* make PTD5 pin as GPIO */
    PORTD->PCR[6] = 0x100;      /* make PTD6 pin as GPIO */
    PORTD->PCR[7] = 0x100;      /* make PTD7 pin as GPIO */
    PTD->PDDR = 0xFF;           /* make PTD7-0 as output pins */
    
    SIM->SCGC5 |= 0x0200;       /* enable clock to Port A */ 
    PORTA->PCR[2] = 0x100;      /* make PTA2 pin as GPIO */
    PORTA->PCR[4] = 0x100;      /* make PTA4 pin as GPIO */
    PORTA->PCR[5] = 0x100;      /* make PTA5 pin as GPIO */
    PTA->PDDR |= 0x34;          /* make PTA5, 4, 2 as output pins */
    
    LCD_command(0x38);      /* set 8-bit data, 2-line, 5x7 font */
    LCD_command(0x01);      /* clear screen, move cursor to home */
    LCD_command(0x0F);      /* turn on display, cursor blinking */
}
void LCD_command(unsigned char command)
{
    LCD_ready();			/* wait until LCD is ready */
    PTA->PCOR = RS | RW;    /* RS = 0, R/W = 0 */
    PTD->PDOR = command;
    PTA->PSOR = EN;         /* pulse E */
    Delay(500);
    PTA->PCOR = EN;
}
void LCD_ready(void)
{
    uint32_t status;
    
    PTD->PDDR = 0x00;          /* PortD input */
    PTA->PCOR = RS;         /* RS = 0 for status */
    PTA->PSOR = RW;         /* R/W = 1, LCD output */
    
    do {    /* stay in the loop until it is not busy */
			  PTA->PCOR = EN;
			  Delay(500);
        PTA->PSOR = EN;     /* raise E */
        Delay(500);
        status = PTD->PDIR; /* read status register */
        PTA->PCOR = EN;
        Delay(500);			/* clear E */
    } while (status & 0x80UL);    /* check busy bit */
    
    PTA->PCOR = RW;         /* R/W = 0, LCD input */
    PTD->PDDR = 0xFF;       /* PortD output */
}
void Delay(volatile unsigned int time_del) {
  while (time_del--) 
		{
  }
}
void LCD_data(unsigned char data)
{
    LCD_ready();			/* wait until LCD is ready */
    PTA->PSOR = RS;         /* RS = 1, R/W = 0 */
    PTA->PCOR = RW;
    PTD->PDOR = data;
    PTA->PSOR = EN;         /* pulse E */
    Delay(500);
    PTA->PCOR = EN;
}