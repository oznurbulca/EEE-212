#include <MKL25Z4.H>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#define DEST_SIZE 40
#define RS 0x04     /* PTA2 mask */ 
#define RW 0x10     /* PTA4 mask */ 
#define EN 0x20     /* PTA5 mask */
int cToi(char d);
int iToc(int c);
int reverse(int number);
void Delay(volatile unsigned int time_del);
void LCD_command(unsigned char command);
void print_fnc(unsigned char *data);
void LCD_data(unsigned char data);
void LCD_init(void);
void LCD_ready(void);
void keypad_init(void);
int intmaker ( char buffer1[16], int time);
long long differentiator( int num, char buffer[16]);
void inttostr(char buffer3[16], long long result);
float integrator(int start,int finish,int charr[6]);
void convertfloattostr(char array[16],float resulti);
uint32_t keypad_getkey(void);
int main(void){
uint32_t key;
	int digit, coeff[6];
char array[16],buffer[16], buffer1[16], buffer3[16],bufferi[16],bufferif[16];
char lookup[]= {'1','2','3','+','4','5','6','B','7','8','9','C','*','0','#','D'};
int d,v,time,m,timei,mi,timeif,mif,l, leng, num,start, finish;
long long result;
float resulti;
LCD_init();
LCD_command(0x80);    
keypad_init();
l=0;
while(keypad_getkey() == 0)
{}
LCD_command(0x01);
while(1)
	{
	Delay(300000);	
	key=keypad_getkey();
	if(key != 0)
		{ if(lookup[key-1] != '#')
		{
		buffer[l] = lookup[key-1];
			coeff[l]=buffer[l]-'0';
			++l;
		LCD_data(lookup[key-1]);
			Delay(300000);
			key =0;
		} else {
		break;}}}
LCD_init();
LCD_command(0x80);      /* set cursor at first line */
print_fnc("Select Operation:");
Delay(300000);	
		
while(keypad_getkey() == 0)
{
}
LCD_command(0x01);
Delay(3000);	
key=keypad_getkey();
if(lookup[key-1] == '#'){
LCD_init();
LCD_command(0x80);      /* set cursor at first line */
print_fnc("Enter a pt:");
Delay(300000);
	
	keypad_init();

while(keypad_getkey() == 0)
{
}
LCD_command(0x01);
Delay(300000);
time=0;
m=0;
while(1)
{
Delay(300000);	
key=keypad_getkey();
if(key != 0)
{ if(lookup[key-1] != '#')
{
buffer1[m] = lookup[key-1];
	
	++m;
	++time;
LCD_data(lookup[key-1]);
	Delay(300000);
	key =0;
} else {
break;}}}
num= intmaker (  buffer1,  time);
result = differentiator(num, buffer);
inttostr(buffer3, result);
LCD_init();
LCD_command(0x80);  
for (v = 0; v < 16; ++v) {
    if (buffer3[v] != '0' || v == 15) {
        for (; v < 16; ++v) {
            LCD_data(buffer3[v]);
        }
        break;
    }
}


///bufferdaki degerleri int yapip diff functionunda isleme sok

}


 if (lookup[key-1] == '*'){
	 LCD_init();
	LCD_command(0x80);      /* set cursor at first line */
	print_fnc("Start:");
	Delay(300000);	
	keypad_init();

while(keypad_getkey() == 0)
{
}
LCD_command(0x01);
Delay(300000);
timei=0;
mi=0;
while(1)
{
Delay(300000);	
key=keypad_getkey();
if(key != 0)
{ if(lookup[key-1] != '#')
{
bufferi[mi] = lookup[key-1];
	
	++mi;
	++timei;
LCD_data(lookup[key-1]);
	Delay(300000);
	key =0;
} else {
break;}}}
	 LCD_init();
	LCD_command(0x80);      /* set cursor at first line */
	print_fnc("Finish:");
	Delay(300000);	
	keypad_init();

while(keypad_getkey() == 0)
{
}
LCD_command(0x01);
Delay(300000);
timeif=0;
mif=0;
while(1)
{
Delay(300000);	
key=keypad_getkey();
if(key != 0)
{ if(lookup[key-1] != '#')
{
bufferif[mif] = lookup[key-1];
	
	++mif;
	++timeif;
LCD_data(lookup[key-1]);
	Delay(300000);
	key =0;
} else {
break;}}}
start= intmaker (  bufferi,  timei);
finish= intmaker (  bufferif,  timeif);

resulti = integrator(start,finish, coeff);
convertfloattostr( array,resulti);
LCD_init();
LCD_command(0x80);  
for (d = 2; d < 16; ++d) {
    if (array[d] != '0' || d == 15) {
			if (array[0]=='-'){
							LCD_data(array[0]);}
			if (array[1]=='!'){
				LCD_data('0');}
        for (; d < 16; ++d) {
					
            LCD_data(array[d]);
        }
        break;
    }
}

}}
void LCD_init(void)
{
    SIM->SCGC5 |= 0x1000;       /* enable clock to Port D */ 
    PORTD->PCR[0] = 0x100;      /* make PTD0 pin as GPIO */
    PORTD->PCR[1] = 0x100;      /* make PTD1 pin as GPIO */
    PORTD->PCR[2] = 0x100;      /* make PTD2 pin as GPIO */
    PORTD->PCR[3] = 0x100;      /* make PTD3 pin as GPIO */
    PORTD->PCR[4] = 0x100;      /* make PTD4 pin as GPIO */
    PORTD->PCR[5] = 0x100;      /* make PTD5 pin as GPIO */
    PORTD->PCR[6] = 0x100;      /* make PTD6 pin as GPIO */
    PORTD->PCR[7] = 0x100;      /* make PTD7 pin as GPIO */
    PTD->PDDR = 0xFF;           /* make PTD7-0 as output pins */
    
    SIM->SCGC5 |= 0x0200;       /* enable clock to Port A */ 
    PORTA->PCR[2] = 0x100;      /* make PTA2 pin as GPIO */
    PORTA->PCR[4] = 0x100;      /* make PTA4 pin as GPIO */
    PORTA->PCR[5] = 0x100;      /* make PTA5 pin as GPIO */
    PTA->PDDR |= 0x34;          /* make PTA5, 4, 2 as output pins */
    
    LCD_command(0x38);      /* set 8-bit data, 2-line, 5x7 font */
    LCD_command(0x01);      /* clear screen, move cursor to home */
    LCD_command(0x0F);      /* turn on display, cursor blinking */
}

/* This function waits until LCD controller is ready to
 * accept a new command/data before returns.
 */
int intmaker(char buffer1[16], int time) {
	int j = 0;
//	int m[time];
	int num = 0;
	int n;
	for (j = 0; j != time; j++) {
		n = buffer1[j] - '0';
		int power = 1;
		for (int k = 0; k < (time - j - 1); k++) {
			power *= 10;
		}

		num += n * power;
	}

	return num;
}

long long differentiator( int num, char buffer[16]){
	int p;
	float c[6];
	int h=0;
	long long result=0;
	for (h=0; h!= 6; h++){
	  p= buffer[h]-'0';
		 c[h]=p;
}
	result=5* num * num* num*num *c[0]+ 4*num * num* num*c[1] + 3* num * num*c[2] +2 *num*c[3] + c[4] ;
//result= (float)(round((double)result));

	return result;}
	
float integrator(int z,int v,int coeff[6]){
		float riemann_result=0;
int  r_divider= 10000;
float delta= v-z;
delta /=r_divider; 
float i_x=z;

for(int c=0; c<r_divider; c++){
	riemann_result += coeff[0]*i_x*i_x*i_x*i_x*i_x;
	riemann_result += coeff[1]*i_x*i_x*i_x*i_x;
	riemann_result += coeff[2]*i_x*i_x*i_x;
	riemann_result += coeff[3]*i_x*i_x;
	riemann_result += coeff[4]*i_x;
  riemann_result += coeff[5];
	
i_x+=delta;
}
riemann_result*=delta;
	return riemann_result;}
	
	void convertfloattostr(char array[16],float resulti){
	  long long s, big, lastdig;
		  int isNegative = 0;
    big = resulti * 1000;
		 if (resulti < 0) {
        isNegative = 1;
        big = -big;  // Make big positive for the conversion
    }
    for (s = 15; s >= 0; s--) {
        if (s != 12) {
            lastdig = big % 10;
            big = big / 10;
            array[s] = lastdig + '0';
        } else {
            array[12] = '.';
        }
    }
		  if (isNegative) {
        array[0] = '-';
    }
			if (resulti > -1 && resulti < 1) {
				array[1] ='!';}
}
		void inttostr(char buffer3[16], long long result){
			long long k, ladig;
			for (k = 15; k >= 0; k--) {
						ladig = result % 10;
            result = result / 10;
            buffer3[k] = ladig + '0';
        } }
void LCD_ready(void)
{
    uint32_t status;
    
    PTD->PDDR = 0x00;          /* PortD input */
    PTA->PCOR = RS;         /* RS = 0 for status */
    PTA->PSOR = RW;         /* R/W = 1, LCD output */
    
    do {    /* stay in the loop until it is not busy */
			  PTA->PCOR = EN;
			  Delay(500);
        PTA->PSOR = EN;     /* raise E */
        Delay(500);
        status = PTD->PDIR; /* read status register */
        PTA->PCOR = EN;
        Delay(500);			/* clear E */
    } while (status & 0x80UL);    /* check busy bit */
    
    PTA->PCOR = RW;         /* R/W = 0, LCD input */
    PTD->PDDR = 0xFF;       /* PortD output */
}

void LCD_command(unsigned char command)
{
    LCD_ready();			/* wait until LCD is ready */
    PTA->PCOR = RS | RW;    /* RS = 0, R/W = 0 */
    PTD->PDOR = command;
    PTA->PSOR = EN;         /* pulse E */
    Delay(500);
    PTA->PCOR = EN;
}

void LCD_data(unsigned char data)
{
    LCD_ready();			/* wait until LCD is ready */
    PTA->PSOR = RS;         /* RS = 1, R/W = 0 */
    PTA->PCOR = RW;
    PTD->PDOR = data;
    PTA->PSOR = EN;         /* pulse E */
    Delay(500);
    PTA->PCOR = EN;
}

/* Delay n milliseconds
 * The CPU core clock is set to MCGFLLCLK at 41.94 MHz in SystemInit().
 */

/* delay n microseconds
 * The CPU core clock is set to MCGFLLCLK at 41.94 MHz in SystemInit().
 */


void Delay(volatile unsigned int time_del) {
  while (time_del--) 
		{
  }
}
void print_fnc(unsigned char *data)
{
	int i = 0 ;
	//Continue until a NULL char comes
	while(data[i] != 0x00)
	{
		LCD_data(data[i]);
		i++;
	}}

void keypad_init(void)
{
    SIM->SCGC5 |= 0x0800;       /* enable clock to Port C */ 
    PORTC->PCR[0] = 0x103;      /* make PTC0 pin as GPIO and enable pullup*/
    PORTC->PCR[1] = 0x103;      /* make PTC1 pin as GPIO and enable pullup*/
    PORTC->PCR[2] = 0x103;      /* make PTC2 pin as GPIO and enable pullup*/
    PORTC->PCR[3] = 0x103;      /* make PTC3 pin as GPIO and enable pullup*/
    PORTC->PCR[4] = 0x103;      /* make PTC4 pin as GPIO and enable pullup*/
    PORTC->PCR[5] = 0x103;      /* make PTC5 pin as GPIO and enable pullup*/
    PORTC->PCR[6] = 0x103;      /* make PTC6 pin as GPIO and enable pullup*/
    PORTC->PCR[7] = 0x103;      /* make PTC7 pin as GPIO and enable pullup*/
    PTC->PDDR = 0x00;         /* make PTC7-0 as input pins */
}




uint32_t keypad_getkey(void)
{
    uint32_t row, col;
    const char row_select[] = {0x01, 0x02, 0x04, 0x08}; /* one row is active */

    /* check to see any key pressed */
    PTC->PDDR |= 0x0F;          /* rows output */
    PTC->PCOR = 0x0F;               /* ground rows */
    Delay(500);                 /* wait for signal return */
    col =  PTC->PDIR & 0xF0UL;     /* read all columns */
    PTC->PDDR = 0;              /*  rows input */
    if (col == 0xF0UL)
        return 0;               /* no key pressed */

    /* If a key is pressed, it gets here to find out which key.
     * It activates one row at a time and read the input to see
     * which column is active. */
    for (row = 0; row < 4; row++)
    {
        PTC->PDDR = 0;                  /* disable all rows */
        PTC->PDDR |= row_select[row];   /* enable one row */
        PTC->PCOR = row_select[row];    /* drive the active row low */
        Delay(500);                     /* wait for signal to settle */
        col = PTC->PDIR & 0xF0UL;         /* read all columns */
        if (col != 0xF0UL) break;         /* if one of the input is low, some key is pressed. */
    }
    PTC->PDDR = 0;                      /* disable all rows */
    if (row == 4) 
        return 0;                       /* if we get here, no key is pressed */
 
    /* gets here when one of the rows has key pressed, check which column it is */
    if (col == 0xE0UL) return row * 4 + 1;    /* key in column 0 */
    if (col == 0xD0UL) return row * 4 + 2;    /* key in column 1 */
    if (col == 0xB0UL) return row * 4 + 3;    /* key in column 2 */
    if (col == 0x70UL) return row * 4 + 4;    /* key in column 3 */

    return 0;   /* just to be safe */
}
